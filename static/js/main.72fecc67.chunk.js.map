{"version":3,"sources":["components/Form/Form.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Phonebook/Phonebook.js","App.js","serviceWorker.js","index.js","components/Form/Form.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css"],"names":["formInitialState","name","number","Form","addContact","contacts","useState","form","setForm","inputHandler","target","value","validator","newContact","length","toast","warn","result","find","className","formingStyles","autoComplete","onSubmit","e","preventDefault","contact","id","uuidv4","htmlFor","type","placeholder","onChange","ContactsList","filter","removeContact","contactsListStyles","toLowerCase","includes","map","onClick","Filter","filteredStyles","Phonebook","state","setState","addContacts","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.72fecc67.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport formingStyles from './Form.module.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst formInitialState = {\r\n    name: '',\r\n    number: '',\r\n};\r\nconst Form = ({ addContact, contacts }) => {\r\n    const [form, setForm] = useState(formInitialState);\r\n    const inputHandler = ({ target: { value, name } }) => {\r\n        setForm({ ...form, [name]: value })\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        const { name, number } = form;\r\n        const contact = {\r\n            id: uuidv4(),\r\n            name,\r\n            number,\r\n        };\r\n        if(contacts.length) {\r\n            validator(contact);\r\n        } else {\r\n            setForm(formInitialState);\r\n            addContact(contact);\r\n        }\r\n    }\r\n    const validator = (newContact) => {\r\n        if(newContact.name.length < 4) {\r\n            toast.warn('Name should have at least 4 symbols')\r\n            return;\r\n        }\r\n        const result = contacts.find(({ name }) => name === newContact.name);\r\n        if(result) {\r\n            toast.warn(`${result.name} is already in contacts`);\r\n            return;\r\n        }\r\n        setForm(formInitialState);\r\n        addContact(newContact);\r\n    };\r\n    const { name, number } = form;\r\n    return (\r\n        <>\r\n        <ToastContainer />\r\n        <form className={formingStyles['contact-form']}\r\n        autoComplete='off'\r\n        onSubmit={submitHandler}>\r\n            <label className={formingStyles['form__label']} htmlFor='name'>Name</label>\r\n            <input className={formingStyles['form__input']}\r\n            type='text'\r\n            name='name'\r\n            value={name}\r\n            placeholder='name'\r\n            onChange={inputHandler}\r\n            />\r\n            <label className={formingStyles['form__label']} htmlFor='number'>Number</label>\r\n            <input className={formingStyles['form__input']}\r\n            type='text'\r\n            name='number'\r\n            value={number}\r\n            placeholder='number'\r\n            onChange={inputHandler}\r\n            />\r\n            <input className={formingStyles['form__button']} type='submit' value={'Add contact'}\r\n            />\r\n        </form>\r\n        </>\r\n    )\r\n};\r\nForm.propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n        })\r\n    )\r\n}\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport contactsListStyles from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({ contacts, filter, removeContact }) => {\r\n    const filterContacts = () => {\r\n        const filteredArray = contacts.filter(({ name }) => \r\n        name.toLowerCase().includes(filter.toLowerCase()),\r\n        );\r\n        return filteredArray;\r\n    }\r\n    return (\r\n        <>\r\n        <ul className={contactsListStyles['contacts-list']}>\r\n            {(filter ? filterContacts() : contacts).map((contact) => (\r\n                <li key={contact.id} className={contactsListStyles['contacts-list__item']}>\r\n                {contact.name}: {contact.number}{' '}\r\n                <button className={contactsListStyles['delete-button']}\r\n                id={contact.id}\r\n                onClick={removeContact}>\r\n                    Delete\r\n                </button>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nContactsList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }),\r\n    ),\r\n    filter: PropTypes.string.isRequired,\r\n    removeContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactsList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport filteredStyles from './Filter.module.css';\r\n\r\nconst Filter = ({ filter, inputHandler}) => {\r\n    return (\r\n        <>\r\n        <div className={filteredStyles['filter-container']}>\r\n            <label className={filteredStyles['filter__label']} htmlFor='filter'>\r\n                Find contacts by name\r\n            </label>\r\n            <input className={filteredStyles['filter__input']}\r\n            type='text'\r\n            name='filter'\r\n            value={filter}\r\n            placeholder='filter'\r\n            onChange={inputHandler}\r\n            />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nFilter.propTypes = {\r\n    filter: PropTypes.string.isRequired,\r\n    inputHandler: PropTypes.func.isRequired,\r\n};\r\nexport default Filter;","import React, { Component } from 'react';\r\nimport Form from '../Form/Form';\r\nimport ContactsList from '../ContactsList/ContactsList';\r\nimport Filter from '../Filter/Filter';\r\n\r\nclass Phonebook extends Component {\r\n    state = {\r\n        contacts: [\r\n        { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n        { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n        { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n        { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n        ],\r\n        filter: '',\r\n    };\r\n    inputHandler = ({ target: { value, name } }) => {\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    }\r\n    addContacts = (contact) => {\r\n        this.setState({contacts: [...this.state.contacts, contact]})\r\n    };\r\n    removeContact = (e) => {\r\n        const { contacts } = this.state;\r\n        this.setState({\r\n            contacts: contacts.filter((contact) => contact.id !== e.target.id),\r\n        })\r\n    }\r\n    render() {\r\n        const { filter, contacts } = this.state;\r\n        return (\r\n            <>\r\n            <h1>Phonebook</h1>\r\n            <Form addContact={this.addContacts} contacts={contacts} />\r\n            <h2>Contacts</h2>\r\n            {contacts.length >= 2 && (\r\n                <Filter filter={filter} inputHandler={this.inputHandler} />\r\n            )}\r\n            <ContactsList\r\n            contacts={contacts}\r\n            filter={filter}\r\n            removeContact={this.removeContact}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Phonebook;","import React from 'react';\nimport './App.css';\nimport Phonebook from './components/Phonebook/Phonebook';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n<Phonebook />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact-form\":\"Form_contact-form__24EXJ\",\"form__input\":\"Form_form__input__qOmNR\",\"form__label\":\"Form_form__label__pUfhY\",\"form__button\":\"Form_form__button__15--_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts-list\":\"ContactsList_contacts-list__rqoN0\",\"contacts-list__item\":\"ContactsList_contacts-list__item__119jB\",\"delete-button\":\"ContactsList_delete-button__2tfzV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter-container\":\"Filter_filter-container__3FZZO\",\"filter__label\":\"Filter_filter__label__mb6Pl\",\"filter__input\":\"Filter_filter__input__2p3tN\"};"],"sourceRoot":""}